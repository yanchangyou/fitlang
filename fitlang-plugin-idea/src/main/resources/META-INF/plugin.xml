<idea-plugin>
    <id>FitLang</id>
    <name>FitLang</name>
    <vendor email="yanchangyou@gmail.com" url="https://github.com/yanchangyou">yanchangyou</vendor>
    <idea-version since-build="183.*" until-build="253.*"/>
    <description><![CDATA[
    English: (后面有中文版)
    <br/>
    <br/>
<p>
Fit language is a lightweight programming language that is developer friendly and tool friendly.
Use AST + JSON to write code, and JSON is the only data type, making plug-in design convenient for extending node functionality.
</p>
<br/>
<p>
First demo, file name is hello.fit<br/>
<br/>
code:<br/>
<pre>
{
    "uni": "hello",
    "input": {
        "who": "world"
    }
}
</pre>
<br/>
<p>
The file 'hello. fit' ends with 'fit' and inherits the JSON language plugin that comes with IDEA, using JSON<br/>
<br/>
input: input json<br/>
<br/>
uni Uniform Node Identifier(like URI), distinguishing different processing, internally corresponding to an implementation class<br/>
<br/>
In the editor, right-click and select 'Run FitLang' to execute. After the code is executed, it will be output<br/>
<br/>
<pre>
{"message":"hello, world!"}
</pre>
<br/>
</p>
<br/>
<p>
<a href='https://github.com/yanchangyou/fitlang-demo'>more demo</a>
</p>
<br/>
<p>
The nodes that have been implemented so far are as follows:<br/>
<br/>
util nodes<br/>
hello: hello world demo<br/>
echo: Return input parameters as is<br/>
add: supports JSON addition<br/>
convert: Transform node, supports JSON to JSON conversion, using conversion expressions<br/>
removeField: Remove the JSON field<br/>
removeEmptyField: Remove an empty field<br/>
print: Console printing<br/>
sleep: Process sleep node<br/>
mix: mix a json object<br/>
replace: replace output<br/>
mix: mix a json object<br/>
mixNode: execute node, and mix<br/>
execute: execute input node define<br/>

<br/>
flow nodes (with child nodes)<br/>
sequence: Sequential execution node<br/>
pipe: pipeline execution node<br/>
foreach: traverse JSON array field nodes<br/>
loop: loop execution node, loopTimes specifies the number of execution times<br/>
switch: branch execution node, switchField specifies the branch field<br/>
return: return json value<br/>

<br/>
web nodes<br/>
hTTP: supports HTTP client request<br/>
server: server node<br/>
proxy: proxy node<br/>
web: config web param, such as response header<br/>

<br/>
Cloud nodes<br/>
cloudServer: start web socket<br/>
cloudClient: connect to web socket<br/>

<br/>
Excel nodes<br/>
readExcel: Read Excel<br/>
writeExcel: Write to Excel<br/>
<br/>

Monitoring nodes<br/>
startMonitor: start monitoring<br/>
getMonitorData: get monitoring data: CPU and Memory<br/>
getClientMonitorData: get client monitor data<br/>
receiveClientMonitorData: receive client monitor data<br/>
pushClientMonitorData: push client monitor data<br/>
getMonitorClient: get monitor client list<br/>
<br/>
<br/>

中文：<br/>
<br/>
<p>
fit语言是一门轻量级编程语言，开发人员友好和工具处理友好。<br/>
使用AST+JSON来编写代码，并且JSON是唯一的数据类型，插件式设计方便扩展节点功能。<br/>
</p>
<br/>
<p>
第一个demo：hello.fit<br/>
内容<br/>
<pre>
{
    "uni": "hello",
    "input": {
        "who": "world"
    }
}
</pre>
<br/>
<p>
hello.fit 后缀以fit结尾，语言插件继承IDEA自带的JSON语言，使用JSON的语法校验、高亮、格式等<br/>
input：入参JSON<br/>
uni 统一节点描述符(借鉴URI)，区分不同的处理，内部对应一个实现类<br/>
编辑器里面，点击右键，选择【Run FitLang】执行，代码执行完将输出<br/>

<pre>
{"message":"hello, world!"}
</pre>

</p>
<br/>
<a href='https://github.com/yanchangyou/fitlang-demo'>更多demo</a>
<br/>
<br/>
<p>
目前已经实现的节点如下：<br/>
<br/>

实用节点<br/>
hello: hello world demo<br/>
echo: 原样返回入参<br/>
add：支持json相加<br/>
print：控制台打印<br/>
sleep：流程休眠节点<br/>
replace: 替换结果输出<br/>
execute: 执行入参传递的流程<br/>
<br/>

JSON节点<br/>
add：支持json相加<br/>
convert：转换节点，支持json到json的转换，使用转换表达式<br/>
removeField：移除json字段<br/>
removeEmptyField：移除空字段<br/>
replace: 替换结果输出<br/>
mix: 混入json对象<br/>
mixNode: 混入节点执行，用于嵌套字段场景<br/>
parseJson: 解析json字符串成json对象
stringifyJson: json对象转换为json字符串
<br/>

流程节点（有child子节点）<br/>
sequence：顺序执行节点<br/>
pipe：管道执行节点<br/>
foreach：遍历json数组字段节点<br/>
loop：循环执行节点，loopTimes制定执行次数<br/>
switch：分支执行节点，switchField指定分支字段<br/>
<br/>

Web节点<br/>
http：支持http-client请求, postJson, postForm, httpGet, httpPut, httpDelete<br/>
server：服务端节点<br/>
proxy：代理节点<br/>
web: 配置web参数，响应头等<br/>
<br/>

云节点<br/>
cloudServer: 启动web socket<br/>
cloudClient: 连接web socket<br/>
<br/>

Excel节点<br/>
readExcel：读取Excle<br/>
writeExcel：写入Excle<br/>
<br/>

监控节点<br/>
startMonitor：启动监控<br/>
getMonitorData：获取监控数据：CPU和Memory<br/>
getClientMonitorData: 获取单个客户端监控数据<br/>
receiveClientMonitorData: 接收客户端监控数据<br/>
pushClientMonitorData: 推送监控数据<br/>
getMonitorClient: 获取监控客户端列表<br/>
<br/>

云节点<br/>
cloudServer：server端<br/>
cloudClient：client端<br/>

</p>
    ]]></description>

    <!-- please see https://www.jetbrains.org/intellij/sdk/docs/basics/getting_started/plugin_compatibility.html
         on how to target different products -->
    <depends>com.intellij.modules.platform</depends>

    <extensions defaultExtensionNs="com.intellij">
<!--        <fileType language="FitLang" name="FitLang" patterns="*.fit"-->
<!--                  implementationClass="my.lang.MyLanguageFileType" fieldName="INSTANCE" extensions="fit"/>-->

        <fileType language="FitLang" name="FitLang" extensions="fit" patterns="*.fit(.json)?" implementationClass="fit.intellij.json.JsonFileType"
                  fieldName="INSTANCE"/>
        <fileType language="FitLang5" name="FitLang5" extensions="fit5" implementationClass="fit.intellij.json.json5.Json5FileType"
                  fieldName="INSTANCE"/>
        <!--        <fileIconProvider implementation="fit.jetbrains.jsonSchema.JsonSchemaIconProvider"/>-->
        <lang.parserDefinition language="FitLang" implementationClass="fit.intellij.json.JsonParserDefinition"/>
        <lang.parserDefinition language="FitLang5" implementationClass="fit.intellij.json.json5.Json5ParserDefinition"/>
        <lang.syntaxHighlighterFactory language="FitLang"
                                       implementationClass="fit.intellij.json.highlighting.JsonSyntaxHighlighterFactory"/>
        <lang.syntaxHighlighterFactory language="FitLang5"
                                       implementationClass="fit.intellij.json.json5.highlighting.Json5SyntaxHighlightingFactory"/>
        <statusBarWidgetProvider implementation="fit.jetbrains.jsonSchema.widget.JsonSchemaStatusWidgetProvider"/>
        <fileBasedIndex implementation="fit.jetbrains.jsonSchema.impl.JsonSchemaFileValuesIndex"/>

        <!-- Code style and formatting -->
        <codeStyleSettingsProvider implementation="fit.intellij.json.formatter.JsonCodeStyleSettingsProvider"/>
        <langCodeStyleSettingsProvider
                implementation="fit.intellij.json.formatter.JsonLanguageCodeStyleSettingsProvider"/>
        <colorSettingsPage implementation="fit.intellij.json.highlighting.JsonColorsPage"/>
        <lang.formatter language="FitLang"
                        implementationClass="fit.intellij.json.formatter.JsonFormattingBuilderModel"/>
        <preFormatProcessor implementation="fit.intellij.json.formatter.JsonTrailingCommaRemover"/>
        <lang.braceMatcher language="FitLang" implementationClass="fit.intellij.json.JsonBraceMatcher"/>
        <quoteHandler fileType="FitLang" className="fit.intellij.json.JsonQuoteHandler"/>
        <enterBetweenBracesDelegate language="FitLang"
                                    implementationClass="com.intellij.codeInsight.editorActions.enter.EnterBetweenBracesAndBracketsDelegate"/>
        <enterHandlerDelegate implementation="fit.intellij.json.editor.JsonEnterHandler" id="FitJsonEnterHandler"/>
        <typedHandler implementation="fit.intellij.json.editor.JsonTypedHandler" id="FitJsonTypedHandler"/>
        <copyPastePreProcessor implementation="fit.intellij.json.editor.JsonCopyPasteProcessor"/>
        <!--        <editorSmartKeysConfigurable instance="fit.intellij.json.editor.JsonSmartKeysConfigurable"/>-->
        <applicationService serviceImplementation="fit.intellij.json.editor.JsonEditorOptions"/>

        <!-- Codeinsight -->
        <breadcrumbsInfoProvider implementation="fit.intellij.json.breadcrumbs.JsonBreadcrumbsProvider"/>
        <focusModeProvider language="FitLang" implementationClass="fit.intellij.json.editor.JsonFocusModeProvider"/>
        <qualifiedNameProvider implementation="fit.intellij.json.navigation.JsonQualifiedNameProvider"/>
        <completion.contributor language="FitLang" id="FitJsonCompletionContributor" order="last"
                                implementationClass="fit.intellij.json.codeinsight.JsonCompletionContributor"/>
        <lang.psiStructureViewFactory language="FitLang"
                                      implementationClass="fit.intellij.json.structureView.JsonStructureViewBuilderFactory"/>
        <lang.foldingBuilder language="FitLang"
                             implementationClass="fit.intellij.json.editor.folding.JsonFoldingBuilder"/>
        <lang.smartEnterProcessor language="FitLang"
                                  implementationClass="fit.intellij.json.editor.smartEnter.JsonSmartEnterProcessor"/>
        <lang.namesValidator language="FitLang" implementationClass="fit.intellij.json.JsonNamesValidator"/>
        <lang.commenter language="FitLang" implementationClass="fit.intellij.json.editor.JsonCommenter"/>
        <lang.surroundDescriptor language="FitLang"
                                 implementationClass="fit.intellij.json.surroundWith.JsonSurroundDescriptor"/>
        <lang.findUsagesProvider language="FitLang"
                                 implementationClass="fit.intellij.json.findUsages.JsonFindUsagesProvider"/>
        <statementUpDownMover implementation="fit.intellij.json.editor.lineMover.JsonLineMover" id="FitLang"
                              order="before line"/>
        <liveTemplateContext implementation="fit.intellij.json.liveTemplates.JsonContextType"/>
        <liveTemplateContext implementation="fit.intellij.json.liveTemplates.JsonInLiteralsContextType"/>
        <liveTemplateContext implementation="fit.intellij.json.liveTemplates.JsonInPropertyKeysContextType"/>
        <spellchecker.support language="FitLang" implementationClass="fit.intellij.json.JsonSpellcheckerStrategy"/>
        <extendWordSelectionHandler
                implementation="fit.intellij.json.editor.selection.JsonStringLiteralSelectionHandler"/>

        <!--        <json.jsonLiteralChecker implementation="fit.intellij.json.codeinsight.StandardJsonLiteralChecker"/>-->
        <!--        <json.jsonLiteralChecker implementation="fit.intellij.json.json5.codeinsight.Json5JsonLiteralChecker"/>-->

        <!-- Annotators -->
        <annotator language="FitLang" implementationClass="fit.intellij.json.codeinsight.JsonLiteralAnnotator"/>

        <!-- Inspections -->
        <localInspection language="FitLang" shortName="FitJsonStandardCompliance"
                         bundle="fit.intellij.json.JsonBundle" key="inspection.compliance.name"
                         groupKey="json.inspection.group"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="fit.intellij.json.codeinsight.JsonStandardComplianceInspection"/>
        <localInspection language="FitLang5" shortName="FitJson5StandardCompliance"
                         bundle="fit.intellij.json.JsonBundle" key="inspection.compliance5.name"
                         groupKey="json.inspection.group"
                         enabledByDefault="true" level="ERROR"
                         implementationClass="fit.intellij.json.json5.codeinsight.Json5StandardComplianceInspection"/>
        <localInspection language="FitLang" shortName="FitJsonDuplicatePropertyKeys"
                         bundle="fit.intellij.json.JsonBundle" key="inspection.duplicate.keys.name"
                         groupKey="json.inspection.group"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="fit.intellij.json.codeinsight.JsonDuplicatePropertyKeysInspection"/>
        <localInspection language="FitLang" shortName="FitJsonSchemaCompliance"
                         bundle="fit.intellij.json.JsonBundle" key="json.schema.inspection.compliance.name"
                         groupKey="json.inspection.group"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="fit.jetbrains.jsonSchema.impl.inspections.JsonSchemaComplianceInspection"/>
        <localInspection language="FitLang" shortName="FitJsonSchemaDeprecation"
                         bundle="fit.intellij.json.JsonBundle" key="json.schema.inspection.deprecation.name"
                         groupKey="json.inspection.group"
                         enabledByDefault="true" level="WEAK WARNING"
                         implementationClass="fit.jetbrains.jsonSchema.impl.inspections.JsonSchemaDeprecationInspection"/>
        <localInspection language="FitLang" shortName="FitJsonSchemaRefReference"
                         bundle="fit.intellij.json.JsonBundle" key="json.schema.ref.refs.inspection.name"
                         groupKey="json.inspection.group"
                         enabledByDefault="true" level="WARNING"
                         implementationClass="fit.jetbrains.jsonSchema.impl.inspections.JsonSchemaRefReferenceInspection"/>

        <lang.elementManipulator forClass="fit.intellij.json.psi.JsonStringLiteral"
                                 implementationClass="fit.intellij.json.psi.JsonStringLiteralManipulator"/>
        <projectService serviceImplementation="fit.jetbrains.jsonSchema.JsonSchemaMappingsProjectConfiguration"/>
        <projectService serviceImplementation="fit.jetbrains.jsonSchema.JsonSchemaCatalogProjectConfiguration"/>
        <projectConfigurable groupId="preferences.externalResources" id="settings.json.schema"
                             displayName="FitJSON Schema Mappings"
                             instance="fit.jetbrains.jsonSchema.settings.mappings.JsonSchemaMappingsConfigurable"
                             nonDefaultProject="true"/>
        <projectConfigurable groupId="preferences.externalResources" id="settings.json.schema.catalog"
                             displayName="Remote JSON Schemas"
                             instance="fit.jetbrains.jsonSchema.JsonSchemaCatalogConfigurable"
                             nonDefaultProject="true"/>
        <projectService serviceInterface="fit.jetbrains.jsonSchema.ide.JsonSchemaService"
                        serviceImplementation="fit.jetbrains.jsonSchema.impl.JsonSchemaServiceImpl"/>
        <completion.contributor order="last, before JsonCompletionContributor" language="FitLang"
                                implementationClass="fit.jetbrains.jsonSchema.impl.JsonSchemaCompletionContributor"/>
        <lang.documentationProvider language="FitLang"
                                    implementationClass="fit.jetbrains.jsonSchema.impl.JsonSchemaDocumentationProvider"/>
        <refactoring.elementListenerProvider
                implementation="fit.jetbrains.jsonSchema.JsonSchemaRefactoringListenerProvider"/>
        <statistics.counterUsagesCollector groupId="fitjson.schema" version="1"/>

        <psi.referenceContributor language="FitLang"
                                  implementation="fit.jetbrains.jsonSchema.impl.JsonSchemaReferenceContributor"/>
        <multiHostInjector implementation="fit.jetbrains.jsonSchema.impl.JsonSchemaRegexInjector"/>
        <multiHostInjector implementation="fit.jetbrains.jsonSchema.impl.JsonSchemaBasedLanguageInjector"/>
        <lang.lineWrapStrategy language="FitLang"
                               implementationClass="fit.intellij.json.formatter.JsonLineWrapPositionStrategy"/>
        <gotoDeclarationHandler implementation="fit.jetbrains.jsonSchema.impl.JsonSchemaGotoDeclarationHandler"/>
        <copyPastePostProcessor implementation="fit.intellij.json.editor.JsonCopyPastePostProcessor"/>
        <highlightVisitor implementation="fit.intellij.json.highlighting.JsonRainbowVisitor"/>
    </extensions>
    <extensions defaultExtensionNs="FitJavaScript">
        <JsonSchema.ProviderFactory
                implementation="fit.jetbrains.jsonSchema.extension.JsonSchemaUserDefinedProviderFactory"/>
        <JsonSchema.ProviderFactory
                implementation="fit.jetbrains.jsonSchema.extension.JsonSchemaProjectSelfProviderFactory"/>
    </extensions>

    <extensions defaultExtensionNs="fit.intellij.json">
        <jsonLikePsiWalkerFactory implementation="fit.intellij.json.json5.Json5PsiWalkerFactory"/>
        <jsonSchemaEnabler implementation="fit.jetbrains.jsonSchema.impl.JsonSchemaInJsonFilesEnabler"/>
    </extensions>

    <extensionPoints>
        <extensionPoint qualifiedName="fit.intellij.json.jsonStandardComplianceProvider"
                        interface="fit.intellij.json.codeinsight.JsonStandardComplianceProvider"/>
        <extensionPoint qualifiedName="FitJavaScript.JsonSchema.ProviderFactory"
                        interface="fit.jetbrains.jsonSchema.extension.JsonSchemaProviderFactory"/>
        <extensionPoint qualifiedName="fit.intellij.json.jsonLikePsiWalkerFactory"
                        interface="fit.jetbrains.jsonSchema.extension.JsonLikePsiWalkerFactory"/>
        <extensionPoint qualifiedName="fit.intellij.json.jsonSchemaEnabler"
                        interface="fit.jetbrains.jsonSchema.extension.JsonSchemaEnabler"/>
        <extensionPoint qualifiedName="fit.intellij.json.jsonWidgetSuppressor"
                        interface="fit.jetbrains.jsonSchema.extension.JsonWidgetSuppressor"/>
        <extensionPoint qualifiedName="fit.intellij.json.jsonLiteralChecker"
                        interface="fit.intellij.json.codeinsight.JsonLiteralChecker"/>
        <extensionPoint qualifiedName="fit.intellij.json.catalog.exclusion"
                        interface="fit.jetbrains.jsonSchema.remote.JsonSchemaCatalogExclusion"/>
    </extensionPoints>

    <extensions defaultExtensionNs="com.intellij">
        <toolWindow id="FitLang Console" anchor="bottom" order="first"
                    factoryClass="my.lang.action.ScriptConsoleWindowFactory"/>
    </extensions>

    <actions>
        <!-- Add your actions here -->
        <action id="RunFitLang" class="my.lang.action.ScriptRunCodeAction" text="Run FitLang"
                description="Run fit lang"
                icon="/my/lang/icon/fit.svg">
            <add-to-group group-id="EditorPopupMenu" anchor="first"/>
            <add-to-group group-id="ProjectViewPopupMenu" anchor="first"/>
            <keyboard-shortcut first-keystroke="control shift J" keymap="$default"/>
        </action>
    </actions>

    <change-notes>
        <![CDATA[
        FitLang update list:<br/>
        <ul>
            <li>0.6.0 support keyword highlight(include and modify idea json code)</li>
            <li>0.5.21 refine loop and foreach node, use parallel mode</li>
            <li>0.5.20 refine expression performance</li>
            <li>0.5.19 add node: timeCount</li>
            <li>0.5.18 refine node</li>
            <li>0.5.17 add node: convertKeyValueList; http node support param1~param9; postman support urlencoded mode</li>
            <li>0.5.16 add node: call; support postman convert to fit; add disable unsafe node such as file</li>
            <li>0.5.15 refine node: stringify support format, foreach support basic array, readFile support dir, http support http status code when error</li>
            <li>0.5.14 add node: readFile, writeFile, parseJson, stringifyJson</li>
            <li>0.5.13 add node: gitPull, server support config fitPath</li>
            <li>0.5.12 support deploy fitlang to aliyun serverless</li>
            <li>0.5.11 Add idle CPU and memory value as serverless</li>
            <li>0.5.10 refine monitor</li>
            <li>0.5.9 monitor clientIp use md5</li>
            <li>0.5.8 monitor page support auto refresh; push monitor data support proxy; bugfix fetch monitor data with second</li>
            <li>0.5.7 update plugin description</li>
            <li>0.5.6 receiveClientMonitorData node support clientIp; parseStringField support get value from context</li>
            <li>0.5.5 add node: getClientMonitorData, receiveClientMonitorData, pushClientMonitorData, getMonitorClient</li>
            <li>0.5.4 fix pipe bug; add online.html page</li>
            <li>0.5.3 add node: getCloudClientMonitorData and support show client monitor data</li>
            <li>0.5.2 monitor node support memory</li>
            <li>0.5.1 monitor node support second param and refine gui</li>
            <li>0.5.0 add node: monitor</li>
            <li>0.4.19 node field support express parse</li>
            <li>0.4.18 refine node: excel, set, execute</li>
            <li>0.4.17 fix foreach bug, index not reset; excelWrite support sheetName param</li>
            <li>0.4.16 server node support default index; assert node support containField and containJson</li>
            <li>0.4.15 excel node support relative path and express</li>
            <li>0.4.14 http add node: postJson, postForm, httpGet, httpPut, httpDelete; add isJsonArrayText support array input</li>
            <li>0.4.13 refine plugin and server mode dir</li>
            <li>0.4.12 refine node: excel support color, assert replace isMatch by success, mix add pickJsonField, http support proxy, server fix local ip bug</li>
            <li>0.4.11 add node: writeExcel</li>
            <li>0.4.10 fix server node reload bug; refine readExcel</li>
            <li>0.4.9 add node: readExcel; remove node: sendToWebsocketClient</li>
            <li>0.4.8 add execute node, refine server mode</li>
            <li>0.4.7 server mode refine</li>
            <li>0.4.6 support server mode start</li>
            <li>0.4.5 add node: mixNode support nest data, support json comment; cloud refine</li>
            <li>0.4.4 add node: cloudServer and cloudClient</li>
            <li>0.4.3 rename websocketServer and websocketClient to wsServer and wsClient</li>
            <li>0.4.2 integrate websocketServer and websocketClient node</li>
            <li>0.4.1 remove flow keyword, keep only two keywords: uni and input(breaking change!)</li>
            <li>0.4.0 remove file server, replace by server node</li>
            <li>0.3.9 add node: websocketServer, websocketClient, sendToWebsocketClient</li>
            <li>0.3.8 add systemInfo node support IDEA-2019.1~2022.2(MacOS)</li>
            <li>0.3.7 plugin support run at folder or multiple files</li>
            <li>0.3.6 plugin min version: IDEA-2016.3</li>
            <li>0.3.5 plugin min version: IDEA-2018.2</li>
            <li>0.3.4 plugin min version: IDEA-2019.2</li>
            <li>0.3.3 server node support rerun</li>
            <li>0.3.2 server node reload bugfix</li>
            <li>0.3.1 server node support reload</li>
            <li>0.3.0 server node rename action to service</li>
            <li>0.2.13 server path refactor</li>
            <li>0.2.12 description improve</li>
            <li>0.2.11 server node bugfix: load only fit file end with .fit or .fit.json</li>
            <li>0.2.10 server node bugfix: meta info list is duplicate</li>
            <li>0.2.9 server node bugfix in windows OS</li>
            <li>0.2.8 server node bugfix; IDEA plugin support 182+</li>
            <li>0.2.7 server node support load action from disk(like JSP)</li>
            <li>0.2.6 add node: thread; server node support port input; loop support bags mode</li>
            <li>0.2.5 add web node; loop node support pipe mode</li>
            <li>0.2.4 bugfix</li>
            <li>0.2.3 add node: mix, replace, eval; support AviatorScript</li>
            <li>0.2.2 add node: proxy</li>
            <li>0.2.1 add node: return</li>
            <li>0.2.0 add node: http, server, fileServer</li>
            <li>0.1.1 add node: sequence, pipe, switch, foreach, loop, hello, echo, add, convert, sleep</li>
        </ul>
        <br/>
        ]]>
    </change-notes>
</idea-plugin>